<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lb on Just Do It ! - Yolo</title>
    <link>https://jupilhwang.github.io/tags/lb/</link>
    <description>Recent content in lb on Just Do It ! - Yolo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US.UTF8</language>
    <copyright>Jupil Hwang All rights reserved</copyright>
    <lastBuildDate>Mon, 01 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jupilhwang.github.io/tags/lb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NSX-T Advanced Load Balancer 를 사용한 쿠버네티스 워크로드 LB</title>
      <link>https://jupilhwang.github.io/post/210208.avi_lb/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/210208.avi_lb/</guid>
      <description>Avi Networks Architecture https://avinetworks.com/docs/ako/0.8/ako-installation
Avi Controller 전체 네트워크의 로드 발랜서, WAF, 방화벽, 인증서, 로깅/모니터링 등을 담당하는 컨트럴 플레인이다.
Avi SE (Service Engine) 실제 트래픽이 전달되는 Virtual Server가 동작하는 엔진으로 데이터 플레인 역할을 한다.
Avi Kubernetes Operator (AKO) Ingress controller : 쿠버네티스 인그레스와 avi lb 의 Pool과 Virtual Server 와 동기화를 통해서 인그레스에 외부 접속 점을 만들어준다 LB Network Policy </description>
    </item>
    
    <item>
      <title>TKG에 MetalLB</title>
      <link>https://jupilhwang.github.io/post/200625_metallb/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/200625_metallb/</guid>
      <description>MetalLB # context kubectl config use-context my-cluster-admin@my-cluster ## MetalLB는 kube-proxy의 IPVS를 사용할 때 Strict ARP가 필요하다 kubectl get configmap kbue-proxy -n kube-system -o yaml | sed -e &amp;#34;s/strictARP: false/strictARP: true/&amp;#34; | kubectl apply -f - -n kube-system kubectl create ns metallb-system # Deploy MetalLB kubectl apply -f https://raw.githubusercontent.com/google/metallb/v0.9.3/manifests/metallb.yaml -n metallb-system podsecuritypolicy.policy/controller created podsecuritypolicy.policy/speaker created serviceaccount/controller created serviceaccount/speaker created clusterrole.rbac.authorization.k8s.io/metallb-system:controller created clusterrole.rbac.authorization.k8s.io/metallb-system:speaker created role.rbac.authorization.k8s.io/config-watcher created role.rbac.authorization.k8s.io/pod-lister created clusterrolebinding.rbac.authorization.k8s.io/metallb-system:controller created clusterrolebinding.rbac.authorization.k8s.io/metallb-system:speaker created rolebinding.</description>
    </item>
    
  </channel>
</rss>
