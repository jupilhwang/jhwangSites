<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>groovy on Just Do It!! YoLo </title>
    <link>https://jupilhwang.github.io/tags/groovy/</link>
    <description>Recent content in groovy on Just Do It!! YoLo </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US.UTF8</language>
    <managingEditor>jupil.hwang &lt;at&gt; gmail &lt;dot&gt; com (Jupil Hwang)</managingEditor>
    <webMaster>jupil.hwang &lt;at&gt; gmail &lt;dot&gt; com (Jupil Hwang)</webMaster>
    <copyright>JHwang All rights reserved</copyright>
    <lastBuildDate>Sat, 10 Dec 2016 15:04:27 +0900</lastBuildDate>
    
	<atom:link href="https://jupilhwang.github.io/tags/groovy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>lazybones 에 새로운 Template추가하기</title>
      <link>https://jupilhwang.github.io/post/2016/12/10/lazybones-%EC%97%90-%EC%83%88%EB%A1%9C%EC%9A%B4-template%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 10 Dec 2016 15:04:27 +0900</pubDate>
      <author>jupil.hwang &lt;at&gt; gmail &lt;dot&gt; com (Jupil Hwang)</author>
      <guid>https://jupilhwang.github.io/post/2016/12/10/lazybones-%EC%97%90-%EC%83%88%EB%A1%9C%EC%9A%B4-template%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid>
      <description>lazybones 의 템플릿 lazybones 의 기본 템플릿은 list 를 통해서 볼 수 있는데, 이외의 다른 템플릿을 추가하기 위해서는 config.groovy에 새로운 Repository 를 추가해 줘야 한다.
lazybones list ${USER_HOME}/.lazybones/config.groovy
bintaryRepositories = [ &amp;quot;kyleboon/lazybones&amp;quot;, &amp;quot;griffon/griffon-lazybones-templates&amp;quot;, &amp;quot;pledbrook/lazybones-templates&amp;quot; ] griffon javafx 를 사용하는 groovy Sample 프로젝트를 생성하기 위해서는 아래와 같이 하면 된다.
lazybones create griffon-javafx-groovy griffon-javafx-groovy-sample lazybones 의 추가 템플릿들 Available templates in kyleboon/lazybones dropwizard groovy-app java-basic jbake Available templates in griffon/griffon-lazybones-templates griffon-javafx-groovy griffon-javafx-java griffon-javafx-kotlin griffon-lanterna-groovy griffon-lanterna-java griffon-pivot-groovy griffon-pivot-java griffon-plugin griffon-swing-groovy griffon-swing-java Available templates in pledbrook/lazybones-templates aem-multimodule-project afterburnerfx afterburnergfx angular-grails asciidoctor-gradle asciidoctor-revealjs dropwizard gaelyk gradle-plugin gradle-quickstart groovy-app groovy-lib java-basic lazybones-project nebula-plugin ratpack ratpack-lite spring-boot-actuator test-handlebars </description>
    </item>
    
    <item>
      <title>Lambda expressions and Stream API with Groovy or JAVA8</title>
      <link>https://jupilhwang.github.io/post/2016/11/11/lambda-expressions-and-stream-api-with-groovy-or-java8/</link>
      <pubDate>Fri, 11 Nov 2016 17:29:55 +0900</pubDate>
      <author>jupil.hwang &lt;at&gt; gmail &lt;dot&gt; com (Jupil Hwang)</author>
      <guid>https://jupilhwang.github.io/post/2016/11/11/lambda-expressions-and-stream-api-with-groovy-or-java8/</guid>
      <description>Lambda expressions and Stream API with Groovy and JAVA 8 Iteration  groovy  def numbers = [1, 2, 3, 4, 5, 6] numbers.each { e -&amp;gt; println e } numbers.each { println it }  java  List&amp;lt;Integer&amp;gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6); numbers.forEach(e -&amp;gt; System.out.println(e)); numbers.forEach(System.out::println); collect  groovy  def numbers = [1, 2, 3, 4, 5, 6] numbers.collect { it * 2 }.each { e -&amp;gt; println e } println numbers.</description>
    </item>
    
    <item>
      <title>Reactive Programming with Groovy</title>
      <link>https://jupilhwang.github.io/post/2016/11/09/reactive-programming-with-groovy/</link>
      <pubDate>Wed, 09 Nov 2016 13:07:41 +0900</pubDate>
      <author>jupil.hwang &lt;at&gt; gmail &lt;dot&gt; com (Jupil Hwang)</author>
      <guid>https://jupilhwang.github.io/post/2016/11/09/reactive-programming-with-groovy/</guid>
      <description>Reactive Streams, Reactive Extensions (Rx)  The Problem :  Performacen : our pages should render within 1000 milliseconds The Rise of microservices : free up resources with Async Operations &amp;amp; Non-Blocking I/O    What is reactive stream (Rx) ? collections + time Single abstration over data from many sources Observer Pattern  Push (not pull) based Iterators  Stream Based Funcational Programming  Imperative vs Reactive Stream  // Iterative List numbers = 1.</description>
    </item>
    
  </channel>
</rss>