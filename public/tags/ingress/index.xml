<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ingress on Just Do It ! - Yolo</title>
    <link>https://jupilhwang.github.io/tags/ingress/</link>
    <description>Recent content in ingress on Just Do It ! - Yolo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US.UTF8</language>
    <copyright>Jupil Hwang All rights reserved</copyright>
    <lastBuildDate>Mon, 01 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jupilhwang.github.io/tags/ingress/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NSX-T Advanced Load Balancer 를 사용한 쿠버네티스 워크로드 LB</title>
      <link>https://jupilhwang.github.io/post/210208.avi_lb/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/210208.avi_lb/</guid>
      <description>Avi Networks Architecture https://avinetworks.com/docs/ako/0.8/ako-installation
Avi Controller 전체 네트워크의 로드 발랜서, WAF, 방화벽, 인증서, 로깅/모니터링 등을 담당하는 컨트럴 플레인이다.
Avi SE (Service Engine) 실제 트래픽이 전달되는 Virtual Server가 동작하는 엔진으로 데이터 플레인 역할을 한다.
Avi Kubernetes Operator (AKO) Ingress controller : 쿠버네티스 인그레스와 avi lb 의 Pool과 Virtual Server 와 동기화를 통해서 인그레스에 외부 접속 점을 만들어준다 LB Network Policy </description>
    </item>
    
    <item>
      <title>PKS의 NSX에서 LB와 Ingress 사용</title>
      <link>https://jupilhwang.github.io/post/pks_lb_ingress/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/pks_lb_ingress/</guid>
      <description>PKS와 네트워크 - PKS의 NSX에서 LB와 Ingress 사용 Network Profile 쿠버네티스 클러스터에서 사용할 네트워크를 위해 미리 프로파일을 생성해 놓고 PKS에서 클러스터를 만들 때 이 네트워크 프로파일을 지정할 수 있다.
기본 쿠버네티스 클러스터 속성 ubuntu@ubuntu-205:~/works/pks-network-profile$ pks cluster k8s --details PKS Version: 1.7.0-build.26 Name: k8s K8s Version: 1.16.7 Plan Name: Small UUID: a09dc43b-c1dc-42db-9fad-c00c2d3594f0 Last Action: CREATE Last Action State: succeeded Last Action Description: Instance provisioning completed Kubernetes Master Host: 10.195.70.136 Kubernetes Master Port: 8443 Worker Nodes: 2 Kubernetes Master IP(s): 10.</description>
    </item>
    
  </channel>
</rss>
