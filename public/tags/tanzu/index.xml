<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tanzu on Just Do It ! - Yolo</title>
    <link>https://jupilhwang.github.io/tags/tanzu/</link>
    <description>Recent content in tanzu on Just Do It ! - Yolo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US.UTF8</language>
    <copyright>Jupil Hwang All rights reserved</copyright>
    <lastBuildDate>Tue, 02 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jupilhwang.github.io/tags/tanzu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Concourse 를 통한 CI/CD 파이프라인</title>
      <link>https://jupilhwang.github.io/post/210208.concourse_pipeline-copy/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/210208.concourse_pipeline-copy/</guid>
      <description>Concourse 설치 Concourse 설치하는 방법은 여러가지가 있는데, 대표적으로 아래 두가지 방법이 있다. 테스트, 데모, PoC 용도로는 docker-compose를 사용할 수 있으며, 운영 서버로 구성하는 경우 서버에 설치하거나 Kubernetes 에 설치할 것을 권고한다.
https://concourse-ci.org/docs.html
Docker-compose docker-compose 를 사용해서 8080 포트로 concurse 를 실행할 수 있으며, docker-compose.yml 파일을 수정하여 포트나 인스턴스 수를 조정할 수 있다.
wget https://concourse-ci.org/docker-compose.yml docker-compose up -d Kubernetes / Helm 쿠버네티스에 Helm 으로 설치할 경우, https://github.com/concourse
helm repo add concourse https://concourse-charts.</description>
    </item>
    
    <item>
      <title>NSX-T Advanced Load Balancer 를 사용한 쿠버네티스 워크로드 LB</title>
      <link>https://jupilhwang.github.io/post/210208.avi_lb/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/210208.avi_lb/</guid>
      <description>Avi Networks Architecture https://avinetworks.com/docs/ako/0.8/ako-installation
Avi Controller 전체 네트워크의 로드 발랜서, WAF, 방화벽, 인증서, 로깅/모니터링 등을 담당하는 컨트럴 플레인이다.
Avi SE (Service Engine) 실제 트래픽이 전달되는 Virtual Server가 동작하는 엔진으로 데이터 플레인 역할을 한다.
Avi Kubernetes Operator (AKO) Ingress controller : 쿠버네티스 인그레스와 avi lb 의 Pool과 Virtual Server 와 동기화를 통해서 인그레스에 외부 접속 점을 만들어준다 LB Network Policy </description>
    </item>
    
    <item>
      <title>openssl로 TLS용 사설인증서 만들기</title>
      <link>https://jupilhwang.github.io/post/210205.tls_%EC%82%AC%EC%84%A4%EC%9D%B8%EC%A6%9D%EC%84%9C/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/210205.tls_%EC%82%AC%EC%84%A4%EC%9D%B8%EC%A6%9D%EC%84%9C/</guid>
      <description>Https 서비스를 위한 TLS 인증서 만들기 https://github.com/jupilhwang/mk-ssl-cert-key
$DOMAIN 값을 원하는 도메인(FQDN)으로 지정한다.
export DOMAIN=example.com curl https://raw.githubusercontent.com/jupilhwang/mk-ssl-cert-key/master/mk-ssl-cert-key.sh | bash - #!/bin/bash set -e SCRIPTDIR=$(cd $(dirname &amp;#34;$0&amp;#34;) &amp;amp;&amp;amp; pwd -P) : ${DOMAIN:?must be set the DNS domain root (ex: example.com)} : ${KEY_BITS:=4096} : ${DAYS:=1825} # Generate CA Certificate openssl req -new -x509 -nodes -sha256 -newkey rsa:${KEY_BITS} -days ${DAYS} -keyout ${DOMAIN}.ca.key.pkcs8 -out ${DOMAIN}.ca.crt -config &amp;lt;( cat &amp;lt;&amp;lt; EOF [ req ] prompt = no distinguished_name = dn [ dn ] C = KR O = Private CN = Autogenerated CA EOF ) # Generate Private key with CA Certificate key openssl rsa -in ${DOMAIN}.</description>
    </item>
    
    <item>
      <title>jumpbox on vSphere for Tanzu</title>
      <link>https://jupilhwang.github.io/post/201223-vsphere-jumpbox-for-tanzu/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/201223-vsphere-jumpbox-for-tanzu/</guid>
      <description>이 문서는 vsphere 환경에서 tanzu를 설치/설정하기 위해 사용하는 jumpbox 를 손쉽게 사용하기 위한 문서이다.
deploy OVA 대체로 Private Cloud이든 Public Cloud이든 동일한 작업환경을 위해서 Jumpbox를 설치해서작업을 하며 Jumpbox로는 ubuntu server 를 많이 사용한다. 여기서도 ubuntu-server-20.04.1 (LTS) 을 기준으로 설명한다.
https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.ova
iso로 실제 ubuntu-server를 설치해도 되고, 이미 export 해놓은 ova를 업로드하여 사용할 수 있지만, Public internet이 되는 환경이라면 이미 만들어진 ubuntu-cloudimage 를 사용하는 것도 좋다.
ubuntu cloud image는 https://cloud-images.ubuntu.com 에서 받을 수 있다.</description>
    </item>
    
    <item>
      <title>TKG 1.2 설치/설정 : quick start</title>
      <link>https://jupilhwang.github.io/post/201101-tkg-quick-start/</link>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/201101-tkg-quick-start/</guid>
      <description>TKG Components Storage Class vSphere 에서 Storage를 사용하기 위해 Tag 기반의 policy 를 적용한 Datastore 를 사용한다. govc tags.category.create tkg-storage-category govc tags.create -c tkg-storage-category tkg-storage govc tags.attach tkg-storage /Datacenter/datastore/LUN01 tkg cluster 생성 시 자동으로 만들어 진 default sc 를 삭제하고 새로 생성한다. k delete sc default k apply -f -&amp;lt;&amp;lt;-EOF kind: StorageClass apiVersion: storage.k8s.io/v1 metadata: name: default annotations: storageclass.kubernetes.io/is-default-class: &amp;#34;true&amp;#34; provisioner: csi.vsphere.vmware.com parameters: storagepolicyname: &amp;#34;TKG Storage Policy&amp;#34; # optional fstype: ext4 EOF MetalLB k apply -f https://raw.</description>
    </item>
    
    <item>
      <title>vSphere with Kubernetes - Tanzu Kubernetes Cluster : 선언적(Declarative) GitOPS CD</title>
      <link>https://jupilhwang.github.io/post/vsphere-with-kubernetes-gitops/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/vsphere-with-kubernetes-gitops/</guid>
      <description>GitOps ArgoCD Installation kubectl create ns argocd kubectl -n argocd apply -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml Disable auth flag kubectl patch deploy argocd-server -n argocd -p &amp;#39;[{&amp;#34;op&amp;#34;: &amp;#34;add&amp;#34;, &amp;#34;path&amp;#34;: &amp;#34;/spec/template/spec/containers/0/command/-&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;--disable-auth&amp;#34;}]&amp;#39; --type json CD for Tanzu Kubernetes Cluster </description>
    </item>
    
    <item>
      <title>vSphere with Kubernetes의 Master/Worker Node SSH 접속하기</title>
      <link>https://jupilhwang.github.io/post/vsphere-with-kuberentes%EC%9D%98-master_worker-node-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/vsphere-with-kuberentes%EC%9D%98-master_worker-node-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0/</guid>
      <description>vSphere with Kubernetes vSphere 7.0 vSphere 7.0의 가장 큰 차이라고 한다면 당연하게 Kubernetes의 지원이다. 기존에 가상 머신, 스토리지, 네트워크의 SDDC부분에 중점을 두었다면, 쿠버네티스를 사용한 메니지먼트로 다양한 환경에서 동일한 메니페스트를 통해 관리를 할 수 있도록 한 것이다. Supervisor Cluster vSphere 7.0 의 Supervisor 클러스터를 통해서 vSphere 전반적인 가상머신, vSphere Pod, Tanzu Kubernetes Cluster를 생성/삭제 등의 라이프사이클을 관리한다. 사용자/그룹 관리, SSO연계, 퍼미션 설정, 네임스페이스 관리 등을 한다.
Supervisor 노드 접속 Supervisor노드에 접속하기 위해서</description>
    </item>
    
  </channel>
</rss>
